#!/bin/sh

if [ "$(id -u)" -ne 0 ]; then
        printf '%s\n' "Are you root? I don't think so."
        exit 1
fi

cdir="$(pwd)"
udir="$cdir/UPDATES"

if [ -d /etc/portage/NYXupdateBACKUP ]; then

### rsync the new portage configs

cp -r /etc/portage/{bashrc,make.conf,patches,savedconfig,sets} /etc/portage/NYXupdateBACKUP
rm -r /etc/portage/package.*/nyx/*
rm -r /etc/portage/env/nyx/*

rsync -qaPh --exclude=nyx.status.d/* .portage/ /etc/portage/

chown -R root:portage /etc/portage
chmod -R 750 /etc/portage

chown root:portage /var/lib/portage/world
chmod 640 /var/lib/portage/world

grep GENTOO_MIRRORS /etc/portage/NYXupdateBACKUP/make.conf >> /etc/portage/make.conf

### execute the update scripts

export nyxgitdir=$cdir

cd $cdir/.updates

if [ -e /etc/portage/nyx.status.d/last.update ]; then
	last="$(</etc/portage/nyx.status.d/last.update)"
else
	printf '%s\n' "0" > /etc/portage/nyx.status.d/last.update
fi

updates="$(find . -maxdepth 1 -iname "*[0-9].[a-z]*" | sort)"

for i in $updates
	do date="$(printf '%s' "$i" | cut -d '/' -f 2- | cut -d '.' -f 1)"
	if [ $date -gt $last ]; then
		sh $i
		printf '%s\n' ".updates/$i executed"
		printf '%s\n' "$date" > /etc/portage/nyx.status.d/last.update
	fi
done

### append options to make.conf to override default settings

cd $cdir

set=$(</etc/portage/nyx.config.d/set.conf)

if [ "$set" = "headless" ]; then
        rm -r /etc/portage/package.use/nyx/desktop.d
        headlesso=$(<$cdir/.res/headless.conf) ; printf '%s\n' "$headlesso" >> /etc/portage/make.conf
fi

overrides=$(</etc/portage/nyx.config.d/make.conf) ; printf '%s\n' "$overrides" >> /etc/portage/make.conf

### git pull scripts and tools into /usr/local/bin

cd /usr/local/bin
        ( rm -r $(find -maxdepth 1 -type l)
        cd scripts; git pull; cd ..
        cd tools; git pull; cd ..
        ln -s $(find custom scripts tools -maxdepth 1 -type f) .
        printf '\n%s\n' "/usr/local/bin updated" ) || (sh $udir/error ; exit 1)

### ask for a tree sync

printf '\n%s\n' "Do you wish to sync the repos?"
select yn in "Yes" "No"; do
    case $yn in
        [Yy]*) (((layman -S ; emerge-webrsync) && eix-update) || (printf '\n%s\n' "error updating repos, aborting" ; exit 1)) ; break ;;
        [Nn]*) printf '\n%s\n' "Repos not updated." ; break ;;
        *) printf '\n%s\n' "Please answer 1 or 2.";;
    esac ;
done

printf '\n%s\n' "You can now run ./update.packages or update your packages yourself."

else
        printf '%s\n' "Seems sh install has not been run before:"
        printf '%s\n' "/etc/portage/NYXupdateBACKUP is missing."
        printf '%s\n' "You should do that."
fi
